name: Build & Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set SHORT_TAG
        id: vars
        run: echo "SHORT_TAG=sha-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push app-a
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/dateapp-app-a:${{ env.SHORT_TAG }} ./apps/app-a
          docker push ghcr.io/${{ github.repository_owner }}/dateapp-app-a:${{ env.SHORT_TAG }}

      - name: Build & Push app-b
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/dateapp-app-b:${{ env.SHORT_TAG }} ./apps/app-b
          docker push ghcr.io/${{ github.repository_owner }}/dateapp-app-b:${{ env.SHORT_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script:
            set -Eeuo pipefail

            DEPLOY_PATH="/opt/dateapp-multi"
            APP_TAG="${APP_TAG:-latest}"

            echo "[INFO] Deploying to $DEPLOY_PATH with tag $APP_TAG"

            # 1. karbantartás bekapcsolása
            touch /etc/nginx/maintenance.on
            systemctl reload nginx

            # 2. freeze ON redis-ben
            docker compose -f "$DEPLOY_PATH/docker-compose.prod.yml" exec -T php_a \
              php -r 'new Redis(["host"=>getenv("REDIS_HOST"),"port"=>getenv("REDIS_PORT"),"auth"=>getenv("REDIS_PASS")])->set("app:freeze",1);'

            # 3. konténerek frissítése
            cd "$DEPLOY_PATH"
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --no-build --remove-orphans

            # 4. karbantartás kikapcsolása (innentől érhető el a site)
            rm -f /etc/nginx/maintenance.on
            systemctl reload nginx

            # 5. smoke teszt (most már 200-at kell adjon)
            curl -fsS http://localhost/a || exit 1
            curl -fsS http://localhost/b || exit 1

            # 6. freeze OFF
            docker compose -f "$DEPLOY_PATH/docker-compose.prod.yml" exec -T php_a \
              php -r 'new Redis(["host"=>getenv("REDIS_HOST"),"port"=>getenv("REDIS_PORT"),"auth"=>getenv("REDIS_PASS")])->del("app:freeze");'
