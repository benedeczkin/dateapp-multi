name: Deploy

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_A: ghcr.io/benedeczkin/dateapp-app-a
  IMAGE_B: ghcr.io/benedeczkin/dateapp-app-b

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag (short SHA)
        id: tag
        run: echo "APP_TAG=sha-${GITHUB_SHA::11}" >> $GITHUB_OUTPUT

      - name: Build & push app-a
        uses: docker/build-push-action@v6
        with:
          context: ./apps/app-a
          push: true
          tags: ${{ env.IMAGE_A }}:${{ steps.tag.outputs.APP_TAG }}

      - name: Build & push app-b
        uses: docker/build-push-action@v6
        with:
          context: ./apps/app-b
          push: true
          tags: ${{ env.IMAGE_B }}:${{ steps.tag.outputs.APP_TAG }}

      # --- DEPLOY ---

      - name: Deploy over SSH (maintenance + freeze + swap + smoke + cleanup)
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_TAG: ${{ steps.tag.outputs.APP_TAG }}
          REDIS_PASS: ${{ secrets.REDIS_PASS }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}        
        with:
          host:     ${{ secrets.DEPLOY_HOST }} 
          username: ${{ secrets.DEPLOY_USER }}
          key:      ${{ secrets.SSH_PRIVATE_KEY }}       
          script: |
            set -euo pipefail

            LOG_DIR="/var/log/dateapp"
            sudo mkdir -p "$LOG_DIR"
            LOG_FILE="$LOG_DIR/deploy-$(date +%F_%H-%M-%S).log"

            exec > >(tee -a "$LOG_FILE") 2>&1

            cleanup() {
              echo "[CLEANUP] Turning OFF maintenance & freeze (even if failed)"
              set +e
              # maintenance OFF
              sudo rm -f /etc/nginx/maintenance.on
              sudo nginx -t && sudo systemctl reload nginx || true
              # freeze OFF
              cd "$DEPLOY_PATH"
              docker compose -f docker-compose.prod.yml exec -T redis \
                sh -lc 'redis-cli -a "$REDIS_PASS" DEL app:freeze' || true
            }
            trap cleanup EXIT

            echo "=== Deploy started at $(date -Is) ==="
            echo "[INFO] Host: $(hostname)  User: $(whoami)"

            cd "$DEPLOY_PATH"

            echo "[STEP] Write APP_TAG to .env"
            if grep -q '^APP_TAG=' .env; then
              sudo sed -i 's/^APP_TAG=.*/APP_TAG='"$APP_TAG"'/' .env
            else
              echo "APP_TAG=$APP_TAG" | sudo tee -a .env >/dev/null
            fi

            echo "[STEP] Maintenance ON"
            echo on | sudo tee /etc/nginx/maintenance.on >/dev/null
            sudo nginx -t && sudo systemctl reload nginx

            echo "[STEP] Freeze ON (Redis)"
            docker compose -f docker-compose.prod.yml exec -T redis \
              sh -lc 'redis-cli -a "$REDIS_PASS" SET app:freeze 1'

            echo "[STEP] Wait for idle (max 60s)"
            for i in $(seq 1 30); do
              A=$(curl -fsS http://127.0.0.1/a/__status || echo '{}')
              B=$(curl -fsS http://127.0.0.1/b/__status || echo '{}')
              echo "[IDLE] /a status: $A"
              echo "[IDLE] /b status: $B"
              echo "$A" | grep -q '"idle"[[:space:]]*:[[:space:]]*true' && A_IDLE=1 || A_IDLE=0
              echo "$B" | grep -q '"idle"[[:space:]]*:[[:space:]]*true' && B_IDLE=1 || B_IDLE=0
              if [ $A_IDLE -eq 1 ] && [ $B_IDLE -eq 1 ]; then
                echo "[IDLE] Both idle."
                break
              fi
              sleep 2
            done

            echo "[STEP] Pull new images & swap"
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --no-build --remove-orphans

            echo "[STEP] Smoke tests"
            curl -fsS http://127.0.0.1/a >/dev/null
            curl -fsS http://127.0.0.1/b >/dev/null

            echo "[STEP] SUCCESS â€” will cleanup (trap)"
            echo "=== Deploy finished at $(date -Is) ==="
